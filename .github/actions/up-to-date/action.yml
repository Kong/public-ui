name: 'PR Up To Date'
description: 'Is/was the PR associated with the workflow commit up to date? Works for open PRs and Squash Merges.'

inputs:
  github_token:
    description: 'GitHub Token'
    required: true

outputs:
  status:
    description: 'Up to Date Status'
    value: ${{ steps.up-to-date.outputs.status }}

runs:
  using: composite
  steps:
    - name: Get PR Info
      id: 'pr-info'
      shell: bash
      run: |
        sha=${{ github.event.pull_request.head.sha || github.sha }}

        response=$(curl \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.github_token }} " \
          https://api.github.com/repos/${{ github.repository }}/commits/$sha/pulls)

        echo "$response"

        error_message=$(echo $response | jq 'try .message catch null')
        data_length=$(echo $response | jq 'try length catch 0')

        if [[ "$error_message" == null && "$data_length" -gt 0 ]]; then
          echo "has_info=true" >> $GITHUB_OUTPUT
          echo "merge_commit_sha=$(echo $response | jq '.[0].merge_commit_sha')" >> $GITHUB_OUTPUT
          echo "head_commit_sha=$(echo $response | jq '.[0].head.sha')" >> $GITHUB_OUTPUT
        else
          echo "has_info=false" >> $GITHUB_OUTPUT
        fi

    - name: Check if Up to Date
      id: 'up-to-date'
      shell: bash
      run: |
        if [ ${{ steps.pr-info.outputs.has_info }} == true ]; then
          base_ref=${{ github.base_ref || github.ref_name }}

          if [ ${{ github.event_name }} == 'pull_request' ]; then
            merge_commit=${{ github.sha }}
          else
            merge_commit=${{ steps.pr-info.outputs.merge_commit_sha }}
          fi
          head_commit=${{ steps.pr-info.outputs.head_commit_sha }}

          git fetch origin $base_ref
          git fetch origin $head_commit

          base_head=$(git rev-parse origin/$base_ref)
          base_prev=$(git rev-parse origin/${base_ref}~1)

          merge_base=$(git merge-base $merge_commit origin/$base_ref)
          head_base=$(git merge-base $head_commit origin/$base_ref)

          echo "**"
          echo "BASE BRANCH: $base_ref"
          echo "BASE BRANCH HEAD: $base_head"
          echo "BASE BRANCH PREVIOUS: $base_prev"
          echo "**"
          echo "PR MERGE COMMIT: $merge_commit"
          echo "PR HEAD COMMIT: $head_commit"
          echo "**"
          echo "PR MERGE BASE: $merge_base"
          echo "PR HEAD BASE: $head_base"
          echo "**"

          if [ ${{ github.event_name }} == 'push' ]; then
            if [ $head_base == $head_commit ]; then
              echo "EVENT WAS NOT A SQUASH MERGE"
              echo "status=false" >> $GITHUB_OUTPUT
            else
              if [ $head_base == $base_prev ]; then
                echo "PR WAS UP TO DATE"
                echo "status=true" >> $GITHUB_OUTPUT
              else
                echo "PR WAS OUT OF DATE"
                echo "status=false" >> $GITHUB_OUTPUT
              fi
            fi
          elif [ ${{ github.event_name }} == 'pull_request' ]; then
            if [ $head_base == $base_head ]; then
              echo "PR IS UP TO DATE"
              echo "status=true" >> $GITHUB_OUTPUT
            else
              echo "PR IS OUT OF DATE"
              echo "status=false" >> $GITHUB_OUTPUT
            fi
          fi
        else
          echo "COMMIT HAS NO ASSOCIATED PR INFO"
          echo "status=false" >> $GITHUB_OUTPUT
        fi
