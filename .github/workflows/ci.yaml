name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      filter: ${{steps.changed_packages.outputs.filter}}
      spec: ${{steps.changed_packages.outputs.spec}}
      unitTestFilter: ${{steps.changed_packages.outputs.unitTestFilter}}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PNPM with Dependencies
        uses: ./.github/actions/setup-pnpm-with-dependencies/
        with:
          force-install: 'true'

      - name: Check for pnpm-lock change
        id: lock-changed
        uses: tj-actions/changed-files@v34
        with:
          files: |
            pnpm-lock.yaml

      - name: Getting changed packages
        id: changed_packages
        run: |
          lernaCommand="changed"
          if [[ "${{ steps.lock-changed.outputs.any_changed }}" == "true" ]]; then
            lernaCommand="ls"
          fi

          echo "lernaCommand: ${lernaCommand}"

          filter=""
          specPackages=""
          unitTestFilter=""

          # get the list of changed packages, grab the location
          for pkgFolder in $(lerna ${lernaCommand} --l --json|jq -r '.[].location')
          do
            # remove current folder from the location path
            pkgFolder="${pkgFolder/$(pwd)\//}"

            # add package path to pnpm filter
            filter="${filter}${pkgFolder}|"

            # if there is cypress tests in the package, add package path to cypress spec
            findRes=$(find "${pkgFolder}" -name "*.cy.ts" || true)
            if [[ -n "${findRes}" ]]; then
                specPackages="${specPackages}${pkgFolder},"
            fi

            findRes=$(find "${pkgFolder}" -name "*.spec.ts" || true)
            if [[ -n "${findRes}" ]]; then
                unitTestFilter="${unitTestFilter}${pkgFolder}|"
            fi
          done

          # remove trailing '|' from pnpm filter
          filter="{("$(echo "${filter}" | sed 's/|$//')")}"
          echo "filter=${filter}"

          unitTestFilter="{("$(echo "${unitTestFilter}" | sed 's/|$//')")}"
          echo "unitTestFilter=${unitTestFilter}"

          # remove trailing ',' from cypress spec
          specPackages=$(echo "${specPackages}" | sed 's/,$//')
          echo "specPackages=${specPackages}"

          # set github output
          echo "filter=${filter}" >> $GITHUB_OUTPUT
          echo "spec=${specPackages}" >> $GITHUB_OUTPUT
          echo "unitTestFilter=${unitTestFilter}" >> $GITHUB_OUTPUT

  build:
    name: Build And Test
    needs: install-dependencies
    # do not do anything unless changed package is detected
    if: ${{ needs.install-dependencies.outputs.filter != '{()}' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Setup PNPM with Dependencies
        uses: ./.github/actions/setup-pnpm-with-dependencies/

      - name: Stylelint Packages
        run: pnpm --stream --filter "${{needs.install-dependencies.outputs.filter}}" run stylelint

      - name: Lint Packages
        run: pnpm --stream --filter "${{needs.install-dependencies.outputs.filter}}" run lint

      - name: Build Packages
        # The `...` syntax tells pnpm to include dependent packages
        run: pnpm --stream --filter "...${{needs.install-dependencies.outputs.filter}}..." run build

      - name: Run Unit Tests
        run: pnpm --stream --filter "${{needs.install-dependencies.outputs.unitTestFilter}}" run test:unit

      - name: Prepare Cypress
        if: ${{ needs.install-dependencies.outputs.spec != '' }}
        run: pnpm cypress install

      - name: Run Component Tests
        if: ${{ needs.install-dependencies.outputs.spec != '' }}
        uses: cypress-io/github-action@v4
        with:
          install: false
          command: pnpm run test:component:ci --spec ${{ needs.install-dependencies.outputs.spec }}

      - name: Save Build Artifacts
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v3
        with:
          name: package-dist-artifacts
          path: packages/*/*/dist

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    name: Publish
    needs:
      - install-dependencies
      - build
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.KONGPONENTS_BOT_PAT }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KONGPONENTS_BOT_PAT }}

      - name: Setup PNPM with Dependencies
        uses: ./.github/actions/setup-pnpm-with-dependencies/

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: package-dist-artifacts
          path: packages/

      - name: Update package versions
        run: |
          git config user.email "konnectx-engineers+kongponents-bot@konghq.com"
          git config user.name "Kong UI Bot"
          lerna version --conventional-commits --create-release github --yes

      - name: Publish packages to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          pnpm --stream --filter "${{needs.install-dependencies.outputs.filter}}" publish  --no-git-checks --access public

  notify-slack:
    name: Slack Notification
    if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - publish
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Get aggregate Workflow status
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send notification
        uses: edge/simple-slack-notify@v1
        env:
          SLACK_WEBHOOK_URL: ${{ env.WORKFLOW_CONCLUSION == 'failure' && secrets.SLACK_WEBHOOK_URL_ALERT || secrets.SLACK_WEBHOOK_URL_NOTIFY }}
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          success_text: '<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}|${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER})> workflow completed successfully :mario_luigi_dance:'
          failure_text: '<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}|${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER})> workflow failed :sad-panda:'
          fields: |
            [{ "title": "Repository", "value": "<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}|${env.GITHUB_REPOSITORY}>", "short": true },
             { "title": "Branch", "value": "<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/tree/${env.GITHUB_HEAD_REF || env.GITHUB_REF.substring(11)}|${env.GITHUB_HEAD_REF || env.GITHUB_REF.substring(11)}>", "short": true },
             { "title": "Revision", "value": "<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/commit/${env.GITHUB_SHA}|${env.GITHUB_SHA.substring(0,7)}>", "short": true }]
